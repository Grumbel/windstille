Windstille ToDo
===============

This is a list of tasks that need to be done in Windstille. This list
is neither complete nor authoritative, so don't just blindly implement
from this list, instead use this list just as guide for things that
might be worth to implement, but not necesarrily have to. Some ideas
in this list might actually be bad and better solved by other means.

Scripting
=========

* add a way to print content of stack

* miniswig does not support __suspend with a return value, should be
  fixed, since Squirrel can handle it. Trouble is that the return
  value is created by the sq_wakeupvm() call, not by the
  sq_suspendvm() one, so its not actually in the wrapper code, but in
  the normal C++ code

  Return value has problem, works in same cases, but returns NULL for
  barrobot.nut in apartment.wst

* Currently we wakeup on conditions that are broadcasted to all
  scripts, in some situation it might make more sense to attach the
  script directly to the object that sends the signal

* some functions in scripts require '::' before them so that they can
  be found, not quite clear why or exactly when this happens

* objects are currently all exported to squirrel, while we should
  probally use id-tags and accessor functions instead:

  bob = get_object("barkeeper")
  bob.say()

* player can launch PDA or inventory when in a dialog, this will break
  the script

* currently the ScriptManager is global, meaning scripts are never
  cleaned up on Sector changes, this needs to be fixed

* figure out proper 'namespaces' for the scripting, i.e. gfx_ or
  video_ for all display related stuff and so on, so that
  tab-completion works better and things become more readable

* document scripting tricks somewhere:
  spawn_object("shockwave", {pos=[0,0]})

* conversations really should be data with hooks for scripts, not pure
  scripts (FIXME: not clear if there is enough benefit and flexibilty
  to try that)

* print and println behave different on console

Input Handling
==============

* implement proper dead-zone in input handling

* allow to load multiple controller config files at once

* add zoom via xbox360 analog trigger buttons

* mouse support for menu

Sound Handling
==============

* split music, voice and sound fx into seperate context or allow to
  change their volume by other means

Miscellaneous
=============

* console doesn't adopt to screen size

* add support for dynamic resize to Menu's, currently Menus have
  scroll bars on large resolutions and empty space when they have to
  few items

* create a UTF32 string class, maybe based on basic_string<>, for use in console

* join Player and Character somewhat or derive one from the other, so
  that one can have scripted people running and jumping around

* implement aspect-ration switching at runtime (menu entry is there,
  just no code) and change default screen ration to that seen in the
  artwork pictures (FIXME: full resolution switch would be more useful
  then just aspect-ratio switch)

* add support for empty sectors (sectors without a player character,
  for use in intro.wst and similar cutscenes)

* HUD elements are whole screens, should be something simpler, also a
  seperation between HUD (energybar, speech, etc.) and Overlays
  (inventory, PDA, etc.) might be good

* do not save command line options given on the command line by
  default or add a --vanilla option or so

  or
   
  rewrite Config class and properly seperate config from command line
  and config done via option menu, i.e. command line settings
  shouldn't be persistent unless told so

* make lightmap resolution independent (done, but an artifact remains
  when the resolution isn't dividable by LIGHTMAP_DIV)

* write a LucasArts-like dialog system (i.e. non-blocking text,
  instead of JRPG like boxes with portraits), see SpeechManager

* PDA needs scrolling text thing (right analog stick?)

* Specify the capabilites that the different subsystems need to have

* make Console not derive from ostream

* GridComponent and ParticleViewer leak (FIXME: Kick out
  GridComponent, since it doesn't work anyway?)

Profiling
=========

* figure out why running the game engine is extremely slow in
  valgrind, while pause menu is fast

* gprof results:

 16.90      0.60     0.60    47535     0.00     0.00  TileMap::draw(SceneContext&)
 15.21      1.14     0.54 37910690     0.00     0.00  VertexArrayDrawingRequest::texcoord(float, float)
 14.37      1.65     0.51 37974070     0.00     0.00  VertexArrayDrawingRequest::vertex(float, float, float)
 11.55      2.06     0.41    79225     0.00     0.00  Sprite3D::draw(Vector2f const&, Matrix const&) const
  3.94      2.20     0.14  1133610     0.00     0.00  OpenGLState::activate()

Bugs
====

* quickly tapping forward-back-hold down forward makes your character
  play the walking animation without actually moving anywhere
   
* Pressing left (or right), jump and and run at the same time throws an
  exception that causes the game to exit:

  std::exception: No marker with name 'RightFoot' defined in action 'Stand'

  in general the game shouldn't crash when stuff isn't found, but
  instead fallback to placeholders and give a error message on the console

* miniswig causes bison++ to crash

3D Things
==========

* bone animation

* change the game to a righthand coordinate system

Level Design
============

* implement light switches in apartment

  Currently the light switch-off sequence is done in the use script,
  this however makes it blocking, it would be nice if the switch-off
  sequence could be handled in a seperate script, but that would
  require a way to apport that script, since else a switch-on could
  collide with a switch-off script

  possible solution:

  function init() {
    lamp_sequence = spawn_script_norun("lamp_sequence.nut");
  }

  function init() {
      ...
      lamp_sequence.call("switch_on");
      ...
      lamp_sequence.call("switch_off");
      ...
  }

  The lamp_sequence.nut script would take control over the process and
  buffer call's when it is busy, once no longer busy it would pick the
  next task from the stack. Different scripts could use different
  stack behaviour, i.e. in the lamp_sequence() it would be useful to
  have a task-stack of size 1 and discard everything else
  

Random Things
=============

* Add more markup to TextArea: (not really needed with LucasArts-like dialog)
    <font color="#ffbbcc"></font>: Use arbitary color
    <b></b>: make text properly bold
    <i></i>: make text properly italic 

* create a mission that is playable

* add line numbers to error messages from lisp

* use non-euler angles in the model viewer

* using a non-square pixel aspect ratio leads to ugly fonts, fonts
  could be rendered with that aspect ratio in mind so that they are
  'pixel-perfect', instead of scaled by OpenGL

* update random number generator:
  http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/index.html

Graphics
========

* remodel titlescreen as 3D model

* setting glLineWidth() leads to some interesting artefacts on the
  menus which might be a cool effect

Code Cleanup
============

* seperate and document components better:

  - collision engine
  - BabyXML
  - tinygettext
  - Sprite2D
  - Sprite3D
  - particle systems
  - Dialog/Conversation

* Screens might fit better into app/ then screen/

* unify copyright header and #ifdef guards

 for i in */*.hpp; do echo $i; NAME=$(echo $i | sed "s/[\/\.]/_/g;s/^/HEADER_WINDSTILLE_/" | tr [a-z] [A-Z]);  sed  -i "s/^\(#[a-z]*\) *HEADER_WINDSTILLE_.*/\1 $NAME/" $i; done

* find a astyle/bcpp/whatever configuration that matches the current
  coding style, maybe a little script that uses Emacs would do


http://orange.blender.org/blog/the-amazing-incredible-monkey-brush#more-49

# EOF #
