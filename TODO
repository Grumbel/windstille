Windstille ToDo
===============

* seperate and document components better:

  - collision engine
  - BabyXML
  - tinygettext
  - Sprite2D
  - Sprite3D
  - particle systems
  - Dialog/Conversation

* unify copyright header and #ifdef guards

* Update Random number generator: http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/index.html

* document scripting tricks somewhere:
  spawn_object("shockwave", {pos=[0,0]})

* miniswig causes bison++ to crash

* find a astyle/bcpp/whatever configuration that matches the current
  coding style, maybe a little script that uses Emacs would do

* write a LucasArts-like dialog system (i.e. non-blocking text, instead of JRPG like boxes with portraits)

* PDA needs scrolling text thing (right analog stick?)

* mouse support for menu

* Add more markup to TextArea: 
    <font color="#ffbbcc"></font>: Use arbitary color
    <b></b>: make text properly bold
    <i></i>: make text properly italic 

* Specify the capabilites that the different subsystems need to have

Windstille Bugs
===============

- Jane's hat is white, caused by one mesh using two textures, could be
  fixed in either the exporter or in the model itself
  
- quickly tapping forward-back-hold down forward makes your character play
  the walking animation without actually moving anywhere
   
- Pressing left (or right), jump and and run at the same time throws an
  exception that causes the game to exit:

  std::exception: No marker with name 'RightFoot' defined in action 'Stand'

  in general the game shouldn't crash when stuff isn't found, but
  instead fallback to placeholders and give a error message on the console

http://orange.blender.org/blog/the-amazing-incredible-monkey-brush#more-49

- add bison checks

- collision detection
- virtual tiles in the editor
- animated tiles

Input Handling:
---------------
- add option to configure dead zone
- implement proper dead-zone in input handling
- allow to load multiple controller config files

Sound Handling:
---------------
- split music, voice and sound fx into seperate context or allow to
  change their volume by other means

Screen Handling:
----------------
- using a screen size != 800x600 breaks the lighting
- using a screen size != 800x600 loads to ugly fonts, should render
  the fonts so that we get 1:1 pixel mapping, can be just calculate
  their needed size and blit with floats, or do we need magic to blit
  with ints to avoid rounding errors?

Misc:
-----

- polish/test scripting interface
- create doll class
- figure out how to do background animation (coroutines, multiple VM, etc.)
- provide decent default keyboard config
- polish dialog system
- a mission that is playable
- polish PDA
- bone animation
- add "save options" button
- reduce tilesize of the large sets, figure out a easy way to resize
  them without messing up alpha
- print and println behave different on console
- calling functions as character scripts instead of files doesn't work
- change the game to a righthand coordinate system
- rewrite Config class and properly seperate config from command line
  and config done via option menu, i.e. command line settings
  shouldn't be persistent unless told so
- add line numbers to error messages from lisp
- fix memory leak in SExprFileReader
- use non-euler angles in the model viewer
- setting glLineWidth() leads to some interesting artefacts on the
  menus which might be a cool effect

# EOF #
