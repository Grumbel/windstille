Windstille ToDo
===============

* some functions in scripts require '::' before them so that they can
  be found, not quite clear why or exactly when this happens

* currently the ScriptManager is global, meaning scripts are never
  cleaned up on Sector changes, this needs to be fixed

* "bounce collision" error is caused by grenade that spawns into a wall

* join Player and Character somewhat or derive one from the other

* implement aspect-ration switching at runtime (menu entry is there, just no code)

* objects are currently all exported to squirrel, while we should
  probally use id-tags and accessor functions instead:

  bob = get_object("barkeeper")
  bob.say()

* add support for empty sectors (sectors without a player character,
  for use in intro.wst and similar cutscenes)

* figure out proper 'namespaces' for the scripting, i.e. gfx_ or
  video_ for all display related stuff and so on, so that
  tab-completion works better and things become more readable

* implement quit() scripting command that aborts a script in the middle (used for debugging)

* HUD elements are whole screens, should be something simpler, also a
  seperation between HUD (energybar, speech, etc.) and Overlays
  (inventory, PDA, etc.) might be good

* do not save options given on the command line by default

* make lightmap resolution independent

* remodel titlescreen as 3D model

* seperate and document components better:

  - collision engine
  - BabyXML
  - tinygettext
  - Sprite2D
  - Sprite3D
  - particle systems
  - Dialog/Conversation

* unify copyright header and #ifdef guards

 for i in */*.hpp; do echo $i; NAME=$(echo $i | sed "s/[\/\.]/_/g;s/^/HEADER_WINDSTILLE_/" | tr [a-z] [A-Z]);  sed  -i "s/^\(#[a-z]*\) *HEADER_WINDSTILLE_.*/\1 $NAME/" $i; done

* Update Random number generator: http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/index.html

* document scripting tricks somewhere:
  spawn_object("shockwave", {pos=[0,0]})

* miniswig causes bison++ to crash

* find a astyle/bcpp/whatever configuration that matches the current
  coding style, maybe a little script that uses Emacs would do

* write a LucasArts-like dialog system (i.e. non-blocking text, instead of JRPG like boxes with portraits), see SpeechManager

* PDA needs scrolling text thing (right analog stick?)

* mouse support for menu

* Add more markup to TextArea: 
    <font color="#ffbbcc"></font>: Use arbitary color
    <b></b>: make text properly bold
    <i></i>: make text properly italic 

* Specify the capabilites that the different subsystems need to have

* conversations really should be data with hooks for scripts, not pure
  scripts

* menu_manager.cpp doesn't use auto_ptr everywhere since
  pack(Component* ) needs to be done before some other actions, which
  can't be done in a streightforward manner with auto_ptr

  pack(child)
    child->set_rect()     
  child->add_item(menuitem) <- doesn't work when size isn't set

* figure out why running the game engine is extremely slow in
  valgrind, while pause menu is fast

* make Console not derive from ostream

* GridComponent and ParticleViewer leak

* Screens might fit better into app/

* gprof results:

 16.90      0.60     0.60    47535     0.00     0.00  TileMap::draw(SceneContext&)
 15.21      1.14     0.54 37910690     0.00     0.00  VertexArrayDrawingRequest::texcoord(float, float)
 14.37      1.65     0.51 37974070     0.00     0.00  VertexArrayDrawingRequest::vertex(float, float, float)
 11.55      2.06     0.41    79225     0.00     0.00  Sprite3D::draw(Vector2f const&, Matrix const&) const
  3.94      2.20     0.14  1133610     0.00     0.00  OpenGLState::activate()

Windstille Bugs
===============

- Jane's hat is white, caused by one mesh using two textures, could be
  fixed in either the exporter or in the model itself
  
- quickly tapping forward-back-hold down forward makes your character play
  the walking animation without actually moving anywhere
   
- Pressing left (or right), jump and and run at the same time throws an
  exception that causes the game to exit:

  std::exception: No marker with name 'RightFoot' defined in action 'Stand'

  in general the game shouldn't crash when stuff isn't found, but
  instead fallback to placeholders and give a error message on the console

http://orange.blender.org/blog/the-amazing-incredible-monkey-brush#more-49

- add bison checks

- collision detection
- virtual tiles in the editor
- animated tiles

Input Handling:
---------------
- add option to configure dead zone
- implement proper dead-zone in input handling
- allow to load multiple controller config files

Sound Handling:
---------------
- split music, voice and sound fx into seperate context or allow to
  change their volume by other means

Screen Handling:
----------------
- using a screen size != 800x600 breaks the lighting
- using a screen size != 800x600 loads to ugly fonts, should render
  the fonts so that we get 1:1 pixel mapping, can be just calculate
  their needed size and blit with floats, or do we need magic to blit
  with ints to avoid rounding errors?

Misc:
-----

- polish/test scripting interface
- create doll class
- figure out how to do background animation (coroutines, multiple VM, etc.)
- provide decent default keyboard config
- polish dialog system
- a mission that is playable
- polish PDA
- bone animation
- add "save options" button
- reduce tilesize of the large sets, figure out a easy way to resize
  them without messing up alpha
- print and println behave different on console
- calling functions as character scripts instead of files doesn't work
- change the game to a righthand coordinate system
- rewrite Config class and properly seperate config from command line
  and config done via option menu, i.e. command line settings
  shouldn't be persistent unless told so
- add line numbers to error messages from lisp
- fix memory leak in SExprFileReader
- use non-euler angles in the model viewer
- setting glLineWidth() leads to some interesting artefacts on the
  menus which might be a cool effect

# EOF #
