##  -*- python -*-
##  Windstille - A Sci-Fi Action-Adventure Game
##  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel@gmx.de>
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##  
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##  
##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.

from glob import glob

Import('conf_env', 'features')

SConscript('scripting/SConscript')

# libutil
util_env = conf_env.Clone()
util_env.Append(CPPPATH=['.'])
util_lib = util_env.StaticLibrary('util', glob('lisp/*.cpp') + glob('util/*.cpp'))

# libphysfs
physfs_env = conf_env.Clone()
physfs_env.Append(CPPPATH=['.'])
physfs_env.ParseConfig('sdl-config --cflags --libs')
physfs_lib = physfs_env.StaticLibrary('physfs', glob('physfs/*.cpp'))

# libmath
math_env = conf_env.Clone()
math_env.Append(CPPPATH=['.'])
math_lib = math_env.StaticLibrary('math', glob('math/*.cpp'))

# libnavgraph
navgraph_env = conf_env.Clone()
navgraph_env.Append(CPPPATH=['.'])
navgraph_lib = navgraph_env.StaticLibrary('navgraph', glob('navigation/*.cpp'))

# libparticles
particles_env = conf_env.Clone()
particles_env.Append(CPPPATH=['.'])
particles_lib = particles_env.StaticLibrary('particles', glob('particles/*.cpp'))

# libdisplay
display_env = conf_env.Clone()
display_env.Append(CPPPATH=['.'])
display_env.ParseConfig('sdl-config --cflags --libs')
display_env.ParseConfig('freetype-config --libs --cflags')
display_lib = display_env.StaticLibrary('display', 
                                        glob('font/*.cpp') +
                                        glob('display/*.cpp') +
                                        glob('sprite2d/*.cpp') +
                                        glob('sprite3d/*.cpp'))

env = conf_env.Clone()
env.Append(LIBS=[particles_lib, navgraph_lib, display_lib, physfs_lib, util_lib, math_lib,
                 'GL', 'GLU', 'GLEW',
                 'squirrel', 'physfs', 'SDL_image', 'openal', 'ogg', 'vorbis', 'vorbisfile', 'png', 'boost_signals-mt'])
env.Append(LIBPATH=['../external/'])
env.Append(CPPPATH=['.', '..', '../external/SQUIRREL2/include/'])

if features['64bit']:
    env.Append(CPPDEFINES = '_SQ64')

if features['cwiid']:
    env.Append(CPPDEFINES = 'HAVE_CWIID')
    env.Append(LIBS = 'cwiid')

env.ParseConfig('sdl-config --cflags --libs')
env.ParseConfig('freetype-config --libs --cflags')

env.Program('../windstille', 
            glob('app/*.cpp') +
            glob('armature/*.cpp') +
            glob('collision/*.cpp') +
            glob('input/*.cpp') +
            glob('hud/*.cpp') +
            glob('objects/*.cpp') +
            glob('screen/*.cpp') +
            glob('properties/*.cpp') +
            glob('tile/*.cpp') +
            glob('sound/*.cpp') +
            glob('scripting/*.cpp') +
            glob('engine/*.cpp') +
#            glob('gui/*.cpp') +
            [
        'gui/automap.cpp',
        'gui/button.cpp',
        'gui/component.cpp',
        'gui/grid_component.cpp',
        'gui/group_component.cpp',
        'gui/gui_manager.cpp',
        'gui/label.cpp',
        'gui/list_view.cpp',
        'gui/menu.cpp',
        'gui/menu_component.cpp',
        'gui/menu_item.cpp',
        'gui/root_component.cpp',
        'gui/slider.cpp',
        'gui/tab_component.cpp',
        'gui/text_view.cpp',
        ])

debug_cxxflags = ["-O0", "-g", "-Wall", "-ansi", "-pedantic", "-Wnon-virtual-dtor", "-Werror"] # "-Wconversion",
# -W: unused parameter
# ['-Wall', '-Werror', '-O2', '-g'],
editor_env = Environment(CPPPATH=['.'],
                         CXXFLAGS=debug_cxxflags,
                         LIBS = [particles_lib, navgraph_lib, display_lib, util_lib, physfs_lib, math_lib,
                                 'GL', 'GLEW', 'SDL_image', 'physfs'])

editor_env.ParseConfig('pkg-config libpng --libs --cflags')
editor_env.ParseConfig('sdl-config --cflags --libs')
editor_env.ParseConfig('Magick++-config --libs --cppflags')
editor_env.ParseConfig('pkg-config --cflags --libs libcurl')
editor_env.ParseConfig('pkg-config --cflags --libs gtkmm-2.4 gtkglextmm-1.2')

editor_env.Program('../windstille-editor',
#                   glob('editor/*.cpp'))
                   [
        'editor/about_window.cpp',
        'editor/control_point.cpp',
        'editor/decal_object_model.cpp',
        'editor/decal_rotate_control_point.cpp',
        'editor/decal_scale_control_point.cpp',
        'editor/editor_window.cpp',
        'editor/layer_widget.cpp',
#        'editor/group_command.cpp',
        'editor/layer.cpp',
        'editor/main.cpp',
        'editor/minimap_widget.cpp',
        'editor/object_model.cpp',
#        'editor/object_commands.cpp',
        'editor/object_model_factory.cpp',
        'editor/object_selector.cpp',
        'editor/particle_system_object_model.cpp',
        'editor/layer_manager.cpp',
        'editor/navgraph_insert_tool.cpp',
        'editor/navgraph_select_tool.cpp',
        'editor/scroll_tool.cpp',
        'editor/sector_model.cpp',
        'editor/select_tool.cpp',
        'editor/selection.cpp',
        'editor/node_selection.cpp',
        'editor/sprite_object_model.cpp',
        'editor/windstille_widget.cpp',
        'editor/zoom_tool.cpp',
        'editor/undo_manager.cpp',
        ])

# EOF #
